/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as ProtectedSettingsRouteRouteImport } from './routes/_protected/settings/route'
import { Route as ProtectedActivitiesRouteRouteImport } from './routes/_protected/activities/route'
import { Route as ProtectedSettingsIndexRouteImport } from './routes/_protected/settings/index'
import { Route as ProtectedHistoryIndexRouteImport } from './routes/_protected/history/index'
import { Route as ProtectedSettingsNotificationsRouteImport } from './routes/_protected/settings/notifications'
import { Route as ProtectedSettingsAccountRouteImport } from './routes/_protected/settings/account'
import { Route as ProtectedActivitiesNewRouteImport } from './routes/_protected/activities/new'
import { Route as ProtectedActivitiesActivityIdRouteRouteImport } from './routes/_protected/activities/$activityId/route'
import { Route as ProtectedSettingsCategoriesIndexRouteImport } from './routes/_protected/settings/categories/index'
import { Route as ProtectedActivitiesActivityIdIndexRouteImport } from './routes/_protected/activities/$activityId/index'
import { Route as ProtectedActivitiesActivityIdEditRouteImport } from './routes/_protected/activities/$activityId/edit'
import { Route as ProtectedActivitiesActivityIdDeleteRouteImport } from './routes/_protected/activities/$activityId/delete'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedSettingsRouteRoute = ProtectedSettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedActivitiesRouteRoute =
  ProtectedActivitiesRouteRouteImport.update({
    id: '/activities',
    path: '/activities',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedSettingsIndexRoute = ProtectedSettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedSettingsRouteRoute,
} as any)
const ProtectedHistoryIndexRoute = ProtectedHistoryIndexRouteImport.update({
  id: '/history/',
  path: '/history/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedSettingsNotificationsRoute =
  ProtectedSettingsNotificationsRouteImport.update({
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => ProtectedSettingsRouteRoute,
  } as any)
const ProtectedSettingsAccountRoute =
  ProtectedSettingsAccountRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => ProtectedSettingsRouteRoute,
  } as any)
const ProtectedActivitiesNewRoute = ProtectedActivitiesNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ProtectedActivitiesRouteRoute,
} as any)
const ProtectedActivitiesActivityIdRouteRoute =
  ProtectedActivitiesActivityIdRouteRouteImport.update({
    id: '/$activityId',
    path: '/$activityId',
    getParentRoute: () => ProtectedActivitiesRouteRoute,
  } as any)
const ProtectedSettingsCategoriesIndexRoute =
  ProtectedSettingsCategoriesIndexRouteImport.update({
    id: '/categories/',
    path: '/categories/',
    getParentRoute: () => ProtectedSettingsRouteRoute,
  } as any)
const ProtectedActivitiesActivityIdIndexRoute =
  ProtectedActivitiesActivityIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProtectedActivitiesActivityIdRouteRoute,
  } as any)
const ProtectedActivitiesActivityIdEditRoute =
  ProtectedActivitiesActivityIdEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => ProtectedActivitiesActivityIdRouteRoute,
  } as any)
const ProtectedActivitiesActivityIdDeleteRoute =
  ProtectedActivitiesActivityIdDeleteRouteImport.update({
    id: '/delete',
    path: '/delete',
    getParentRoute: () => ProtectedActivitiesActivityIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/activities': typeof ProtectedActivitiesRouteRouteWithChildren
  '/settings': typeof ProtectedSettingsRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof ProtectedIndexRoute
  '/activities/$activityId': typeof ProtectedActivitiesActivityIdRouteRouteWithChildren
  '/activities/new': typeof ProtectedActivitiesNewRoute
  '/settings/account': typeof ProtectedSettingsAccountRoute
  '/settings/notifications': typeof ProtectedSettingsNotificationsRoute
  '/history': typeof ProtectedHistoryIndexRoute
  '/settings/': typeof ProtectedSettingsIndexRoute
  '/activities/$activityId/delete': typeof ProtectedActivitiesActivityIdDeleteRoute
  '/activities/$activityId/edit': typeof ProtectedActivitiesActivityIdEditRoute
  '/activities/$activityId/': typeof ProtectedActivitiesActivityIdIndexRoute
  '/settings/categories': typeof ProtectedSettingsCategoriesIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/activities': typeof ProtectedActivitiesRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof ProtectedIndexRoute
  '/activities/new': typeof ProtectedActivitiesNewRoute
  '/settings/account': typeof ProtectedSettingsAccountRoute
  '/settings/notifications': typeof ProtectedSettingsNotificationsRoute
  '/history': typeof ProtectedHistoryIndexRoute
  '/settings': typeof ProtectedSettingsIndexRoute
  '/activities/$activityId/delete': typeof ProtectedActivitiesActivityIdDeleteRoute
  '/activities/$activityId/edit': typeof ProtectedActivitiesActivityIdEditRoute
  '/activities/$activityId': typeof ProtectedActivitiesActivityIdIndexRoute
  '/settings/categories': typeof ProtectedSettingsCategoriesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_protected/activities': typeof ProtectedActivitiesRouteRouteWithChildren
  '/_protected/settings': typeof ProtectedSettingsRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/activities/$activityId': typeof ProtectedActivitiesActivityIdRouteRouteWithChildren
  '/_protected/activities/new': typeof ProtectedActivitiesNewRoute
  '/_protected/settings/account': typeof ProtectedSettingsAccountRoute
  '/_protected/settings/notifications': typeof ProtectedSettingsNotificationsRoute
  '/_protected/history/': typeof ProtectedHistoryIndexRoute
  '/_protected/settings/': typeof ProtectedSettingsIndexRoute
  '/_protected/activities/$activityId/delete': typeof ProtectedActivitiesActivityIdDeleteRoute
  '/_protected/activities/$activityId/edit': typeof ProtectedActivitiesActivityIdEditRoute
  '/_protected/activities/$activityId/': typeof ProtectedActivitiesActivityIdIndexRoute
  '/_protected/settings/categories/': typeof ProtectedSettingsCategoriesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/activities'
    | '/settings'
    | '/demo/tanstack-query'
    | '/'
    | '/activities/$activityId'
    | '/activities/new'
    | '/settings/account'
    | '/settings/notifications'
    | '/history'
    | '/settings/'
    | '/activities/$activityId/delete'
    | '/activities/$activityId/edit'
    | '/activities/$activityId/'
    | '/settings/categories'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/activities'
    | '/demo/tanstack-query'
    | '/'
    | '/activities/new'
    | '/settings/account'
    | '/settings/notifications'
    | '/history'
    | '/settings'
    | '/activities/$activityId/delete'
    | '/activities/$activityId/edit'
    | '/activities/$activityId'
    | '/settings/categories'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/_protected/activities'
    | '/_protected/settings'
    | '/demo/tanstack-query'
    | '/_protected/'
    | '/_protected/activities/$activityId'
    | '/_protected/activities/new'
    | '/_protected/settings/account'
    | '/_protected/settings/notifications'
    | '/_protected/history/'
    | '/_protected/settings/'
    | '/_protected/activities/$activityId/delete'
    | '/_protected/activities/$activityId/edit'
    | '/_protected/activities/$activityId/'
    | '/_protected/settings/categories/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/activities': {
      id: '/_protected/activities'
      path: '/activities'
      fullPath: '/activities'
      preLoaderRoute: typeof ProtectedActivitiesRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/settings/': {
      id: '/_protected/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof ProtectedSettingsIndexRouteImport
      parentRoute: typeof ProtectedSettingsRouteRoute
    }
    '/_protected/history/': {
      id: '/_protected/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof ProtectedHistoryIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/settings/notifications': {
      id: '/_protected/settings/notifications'
      path: '/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof ProtectedSettingsNotificationsRouteImport
      parentRoute: typeof ProtectedSettingsRouteRoute
    }
    '/_protected/settings/account': {
      id: '/_protected/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof ProtectedSettingsAccountRouteImport
      parentRoute: typeof ProtectedSettingsRouteRoute
    }
    '/_protected/activities/new': {
      id: '/_protected/activities/new'
      path: '/new'
      fullPath: '/activities/new'
      preLoaderRoute: typeof ProtectedActivitiesNewRouteImport
      parentRoute: typeof ProtectedActivitiesRouteRoute
    }
    '/_protected/activities/$activityId': {
      id: '/_protected/activities/$activityId'
      path: '/$activityId'
      fullPath: '/activities/$activityId'
      preLoaderRoute: typeof ProtectedActivitiesActivityIdRouteRouteImport
      parentRoute: typeof ProtectedActivitiesRouteRoute
    }
    '/_protected/settings/categories/': {
      id: '/_protected/settings/categories/'
      path: '/categories'
      fullPath: '/settings/categories'
      preLoaderRoute: typeof ProtectedSettingsCategoriesIndexRouteImport
      parentRoute: typeof ProtectedSettingsRouteRoute
    }
    '/_protected/activities/$activityId/': {
      id: '/_protected/activities/$activityId/'
      path: '/'
      fullPath: '/activities/$activityId/'
      preLoaderRoute: typeof ProtectedActivitiesActivityIdIndexRouteImport
      parentRoute: typeof ProtectedActivitiesActivityIdRouteRoute
    }
    '/_protected/activities/$activityId/edit': {
      id: '/_protected/activities/$activityId/edit'
      path: '/edit'
      fullPath: '/activities/$activityId/edit'
      preLoaderRoute: typeof ProtectedActivitiesActivityIdEditRouteImport
      parentRoute: typeof ProtectedActivitiesActivityIdRouteRoute
    }
    '/_protected/activities/$activityId/delete': {
      id: '/_protected/activities/$activityId/delete'
      path: '/delete'
      fullPath: '/activities/$activityId/delete'
      preLoaderRoute: typeof ProtectedActivitiesActivityIdDeleteRouteImport
      parentRoute: typeof ProtectedActivitiesActivityIdRouteRoute
    }
  }
}

interface ProtectedActivitiesActivityIdRouteRouteChildren {
  ProtectedActivitiesActivityIdDeleteRoute: typeof ProtectedActivitiesActivityIdDeleteRoute
  ProtectedActivitiesActivityIdEditRoute: typeof ProtectedActivitiesActivityIdEditRoute
  ProtectedActivitiesActivityIdIndexRoute: typeof ProtectedActivitiesActivityIdIndexRoute
}

const ProtectedActivitiesActivityIdRouteRouteChildren: ProtectedActivitiesActivityIdRouteRouteChildren =
  {
    ProtectedActivitiesActivityIdDeleteRoute:
      ProtectedActivitiesActivityIdDeleteRoute,
    ProtectedActivitiesActivityIdEditRoute:
      ProtectedActivitiesActivityIdEditRoute,
    ProtectedActivitiesActivityIdIndexRoute:
      ProtectedActivitiesActivityIdIndexRoute,
  }

const ProtectedActivitiesActivityIdRouteRouteWithChildren =
  ProtectedActivitiesActivityIdRouteRoute._addFileChildren(
    ProtectedActivitiesActivityIdRouteRouteChildren,
  )

interface ProtectedActivitiesRouteRouteChildren {
  ProtectedActivitiesActivityIdRouteRoute: typeof ProtectedActivitiesActivityIdRouteRouteWithChildren
  ProtectedActivitiesNewRoute: typeof ProtectedActivitiesNewRoute
}

const ProtectedActivitiesRouteRouteChildren: ProtectedActivitiesRouteRouteChildren =
  {
    ProtectedActivitiesActivityIdRouteRoute:
      ProtectedActivitiesActivityIdRouteRouteWithChildren,
    ProtectedActivitiesNewRoute: ProtectedActivitiesNewRoute,
  }

const ProtectedActivitiesRouteRouteWithChildren =
  ProtectedActivitiesRouteRoute._addFileChildren(
    ProtectedActivitiesRouteRouteChildren,
  )

interface ProtectedSettingsRouteRouteChildren {
  ProtectedSettingsAccountRoute: typeof ProtectedSettingsAccountRoute
  ProtectedSettingsNotificationsRoute: typeof ProtectedSettingsNotificationsRoute
  ProtectedSettingsIndexRoute: typeof ProtectedSettingsIndexRoute
  ProtectedSettingsCategoriesIndexRoute: typeof ProtectedSettingsCategoriesIndexRoute
}

const ProtectedSettingsRouteRouteChildren: ProtectedSettingsRouteRouteChildren =
  {
    ProtectedSettingsAccountRoute: ProtectedSettingsAccountRoute,
    ProtectedSettingsNotificationsRoute: ProtectedSettingsNotificationsRoute,
    ProtectedSettingsIndexRoute: ProtectedSettingsIndexRoute,
    ProtectedSettingsCategoriesIndexRoute:
      ProtectedSettingsCategoriesIndexRoute,
  }

const ProtectedSettingsRouteRouteWithChildren =
  ProtectedSettingsRouteRoute._addFileChildren(
    ProtectedSettingsRouteRouteChildren,
  )

interface ProtectedRouteRouteChildren {
  ProtectedActivitiesRouteRoute: typeof ProtectedActivitiesRouteRouteWithChildren
  ProtectedSettingsRouteRoute: typeof ProtectedSettingsRouteRouteWithChildren
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedHistoryIndexRoute: typeof ProtectedHistoryIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedActivitiesRouteRoute: ProtectedActivitiesRouteRouteWithChildren,
  ProtectedSettingsRouteRoute: ProtectedSettingsRouteRouteWithChildren,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedHistoryIndexRoute: ProtectedHistoryIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
